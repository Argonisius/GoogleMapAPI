
{block content}
<div id="map_canvas"></div>
{/block}

{block head}
<style type="text/css">
#map_canvas { 
	width:{$width};
	height:{$height};
}
</style>



<script type="text/javascript">
	
	var map;
	var marker;
	var markers = [];
	var bounds;
	var markersArray = [];
	
	function initialize() {
		var centerMap = new google.maps.LatLng({$position[0]}, {$position[1]});
		bounds = new google.maps.LatLngBounds();
		var mapOptions = {
			center: centerMap,
			zoom: {$zoom},
			mapTypeId: google.maps.MapTypeId.{!$type}
		};

		// Display a map on the page
		map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
		map.setTilt(45);
		marker =  new google.maps.Marker;
		loadMarkers();


		// Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
		var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) 
		{
			this.setZoom({$zoom});
			google.maps.event.removeListener(boundsListener);
		});
	}
	
	function clearOverlays() {
		for (var i = 0; i < markersArray.length; i++ ) {
			markersArray[i].setMap(null);
		}
		markersArray.length = 0;
	}

	function loadMarkers(url)
	{

		if (!url || 0 === url.length)
		{
			url={link markers!};
		}
		clearOverlays();

		$.getJSON( url, function( data ) 
		{
			markers = [];

			$.each( data, function( key, val )
			{
				markers[key] = val;
			});

			var infoWindow = new google.maps.InfoWindow(), marker, i;
			// Loop through our array of markers & place each one on the map  
			for( i = 0; i < markers.length; i++ ) 
			{

				var position = new google.maps.LatLng(markers[i]['position'][0], markers[i]['position'][1]);
				{if $bound}
				bounds.extend(position);
				{/if}
					
				marker = new google.maps.Marker({
					position: position,
					map: map,
					title: ((("title" in markers[i])) ? markers[i]['title'] : null)
				});
				
				if ("animation" in markers[i])
				{
					switch(markers[i]['animation'])
					{
					case 'DROP':
					  marker.setAnimation(google.maps.Animation.DROP);
					  break;
					case 'BOUNCE':
					  marker.setAnimation(google.maps.Animation.BOUNCE);
					  break;
					default:
					  marker.setAnimation(null);
					}
				}

				if ("color" in markers[i] && $.inArray(markers[i]['color'], new Array('black', 'brown', 'green', 'purple', 'yellow', 'blue', 'gray', 'orange', 'red', 'white')) > 0)
				{
					marker.setIcon('http://maps.google.com/mapfiles/ms/icons/'+markers[i]['color']+'-dot.png');
				}
				
				if ("icon" in markers[i])
				{
					marker.setIcon('{!$basePath}/'+markers[i]['icon']);
				}

				markersArray.push(marker); 
				
				// Allow each marker to have an info window    
				if (("message" in markers[i]))
				{
					google.maps.event.addListener(marker, 'click', (function(marker, i) {
						return function() {
							infoWindow.setContent('<div>'+markers[i]['message']+'</div>');
							infoWindow.open(map, marker);
					}})(marker, i));
				}
			}
			
			{if $bound}
			// Automatically center the map fitting all markers on the screen
			map.fitBounds(bounds);
			{/if}
		});
	}

	function loadScript() {
		var script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&' +
		'callback=initialize{if $key != null}&key={!$key}{/if}';
		document.body.appendChild(script);
	}
	
	window.onload = loadScript;
</script>
{/block}